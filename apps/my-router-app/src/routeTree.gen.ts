/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as XImport } from "./routes/x"
import { Route as SImport } from "./routes/s"
import { Route as AboutImport } from "./routes/about"
import { Route as IndexImport } from "./routes/index"

// Create/Update Routes

const XRoute = XImport.update({
  id: "/x",
  path: "/x",
  getParentRoute: () => rootRoute,
} as any)

const SRoute = SImport.update({
  id: "/s",
  path: "/s",
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/about": {
      id: "/about"
      path: "/about"
      fullPath: "/about"
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    "/s": {
      id: "/s"
      path: "/s"
      fullPath: "/s"
      preLoaderRoute: typeof SImport
      parentRoute: typeof rootRoute
    }
    "/x": {
      id: "/x"
      path: "/x"
      fullPath: "/x"
      preLoaderRoute: typeof XImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/about": typeof AboutRoute
  "/s": typeof SRoute
  "/x": typeof XRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/about": typeof AboutRoute
  "/s": typeof SRoute
  "/x": typeof XRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/about": typeof AboutRoute
  "/s": typeof SRoute
  "/x": typeof XRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/about" | "/s" | "/x"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/about" | "/s" | "/x"
  id: "__root__" | "/" | "/about" | "/s" | "/x"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  SRoute: typeof SRoute
  XRoute: typeof XRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  SRoute: SRoute,
  XRoute: XRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/s",
        "/x"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/s": {
      "filePath": "s.tsx"
    },
    "/x": {
      "filePath": "x.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
